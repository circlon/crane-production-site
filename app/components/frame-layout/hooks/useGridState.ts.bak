'use client';

// Импортируем хук из центрального компонента
import { useGridState as useGridStateCore } from '@/components/core/hooks/use-grid-state';

// Реэкспортируем хук с тем же именем для обратной совместимости
export default useGridStateCore;

// Для документации и справки ниже закомментирована исходная версия хука
  // Нейтральная инициализация - начинаем без наведенных элементов
  const [hovered, setHovered] = useState<HoverState | null>(null);
  
  // Рассчитывает размеры сетки на основе состояния наведения
  const getGridTemplateProps = useCallback((): GridTemplateProps => {
    if (!hovered) return { rows: "1fr 1fr 1fr", cols: "1fr 1fr 1fr" };
    
    const { row, col } = hovered;
    const nonHoveredSize = (12 - hoverSize) / 2;
    
    return {
      rows: [0, 1, 2].map(r => 
        r === row ? `${hoverSize}fr` : `${nonHoveredSize}fr`).join(" "),
      cols: [0, 1, 2].map(c => 
        c === col ? `${hoverSize}fr` : `${nonHoveredSize}fr`).join(" ")
    };
  }, [hovered, hoverSize]);

  // Определяет, является ли фрейм с указанным ID наведенным
  const isHovered = useCallback((id: number) => {
    return hovered?.id === id;
  }, [hovered]);
  
  return {
    hovered,
    setHovered,
    getGridTemplateProps,
    isHovered
  };
} 